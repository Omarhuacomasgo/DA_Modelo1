---
title: "El padr√≥n electoral en cifras"
subtitle: "¬øCuantos votaremos en estas eleccions generales 2026?"
author: "Equipo Voto Informado"
format: 
  html:
    page-layout: full
---


```{r}
pacman::p_load(tidyverse, plotly, DT, readxl, janitor, leaflet, sf, viridis, scales, gganimate, knitr, kableExtra, htmltools, htmlwidgets)
```



```{r setup}
#| include: false
#| message: false
#| warning: false

# Cargar librer√≠as necesarias
library(tidyverse)
library(plotly)
library(DT)
library(readxl)
library(janitor)
library(leaflet)
library(sf)
library(viridis)
library(scales)
library(gganimate)
library(knitr)
library(kableExtra)
library(htmltools)
library(htmlwidgets)

# Configuraci√≥n de tema personalizado
theme_electoral <- function() {
  theme_minimal() +
    theme(
      plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
      plot.subtitle = element_text(hjust = 0.5, size = 12),
      plot.caption = element_text(hjust = 0, size = 9, face = "italic"),
      panel.grid.minor = element_blank(),
      legend.position = "bottom"
    )
}

# Colores institucionales
colores_jne <- c("#1B4F72", "#2874A6", "#3498DB", "#85C1E2", "#AED6F1")
```

```{r load_data}
#| echo: false
#| message: false

# Cargar los datos consolidados
padron_completo <- read_excel("output/padron_electoral_consolidado_completo.xlsx", 
                              sheet = "Padron_Nacional")
padron_extranjero <- read_excel("output/padron_electoral_consolidado_completo.xlsx", 
                                sheet = "Padron_Extranjero")
padron_departamental <- read_excel("output/padron_electoral_consolidado_completo.xlsx", 
                                   sheet = "Padron_Departamental")
evolucion_temporal <- read_excel("output/padron_electoral_consolidado_completo.xlsx", 
                                 sheet = "Evolucion_Temporal")
resumen_anual <- read_excel("output/padron_electoral_consolidado_completo.xlsx", 
                            sheet = "Resumen_por_A√±o")
```

# üìä Tres datos claves que necesitas saber

En este informe te presentamos todo lo que necesitas saber antes del cierre oficial del  **Padr√≥n electoral** para estas nuevas elecciones generales. 


::::: {.panel-tabset}

## Indicadores clave

Un elector informado conoce su historia. 

:::: {.columns}

::: {.column width="25%"}
<div class="card text-white bg-primary mb-3">
  <div class="card-header">Total Electores 2026</div>
  <div class="card-body">
    <h2 class="card-title">`r format(evolucion_temporal %>% filter(a√±o == 2026) %>% pull(total_electores), big.mark = ",")`</h2>
    <p class="card-text">Padr√≥n electoral actual</p>
  </div>
</div>
:::

::: {.column width="25%"}
<div class="card text-white bg-success mb-3">
  <div class="card-header">Crecimiento 2021-2026</div>
  <div class="card-body">
    <h2 class="card-title">`r round(((evolucion_temporal %>% filter(a√±o == 2026) %>% pull(total_electores)) / (evolucion_temporal %>% filter(a√±o == 2021) %>% pull(total_electores)) - 1) * 100, 1)`%</h2>
    <p class="card-text">Incremento quinquenal</p>
  </div>
</div>
:::

::: {.column width="25%"}
<div class="card text-white bg-info mb-3">
  <div class="card-header">Balance de G√©nero</div>
  <div class="card-body">
    <h2 class="card-title">`r round(evolucion_temporal %>% filter(a√±o == 2026) %>% pull(pct_mujeres), 1)`%</h2>
    <p class="card-text">Electoras mujeres</p>
  </div>
</div>
:::

::: {.column width="25%"}
<div class="card text-white bg-warning mb-3">
  <div class="card-header">Departamentos</div>
  <div class="card-body">
    <h2 class="card-title">`r n_distinct(padron_departamental$departamento)`</h2>
    <p class="card-text">Circunscripciones electorales</p>
  </div>
</div>
:::

::::

## Evoluci√≥n hist√≥rica



```{r evolucion_historica}
#| echo: false
#| message: false

# Preparar datos con eventos electorales
evolucion_completa <- evolucion_temporal %>%
  mutate(
    evento = case_when(
      a√±o == 2006 ~ "Elecciones Generales",
      a√±o == 2011 ~ "Elecciones Generales",
      a√±o == 2016 ~ "Elecciones Generales",
      a√±o == 2021 ~ "Elecciones Generales",
      a√±o == 2026 ~ "Pr√≥ximas Elecciones"
    ),
    crecimiento = lag(total_electores),
    crecimiento_pct = round((total_electores / lag(total_electores) - 1) * 100, 2)
  )

# Gr√°fico interactivo de evoluci√≥n
p_evolucion <- plot_ly(evolucion_completa, x = ~a√±o, y = ~total_electores,
                       type = 'scatter', mode = 'lines+markers+text',
                       line = list(color = '#1B4F72', width = 3),
                       marker = list(color = '#2874A6', size = 12),
                       text = ~paste0(format(total_electores, big.mark = ",")),
                       textposition = "top center",
                       hovertemplate = paste0(
                         "<b>A√±o:</b> %{x}<br>",
                         "<b>Electores:</b> %{y:,.0f}<br>",
                         "<b>Evento:</b> ", evolucion_completa$evento, "<br>",
                         "<b>Crecimiento:</b> ", ifelse(is.na(evolucion_completa$crecimiento_pct), 
                                                       "N/A", 
                                                       paste0(evolucion_completa$crecimiento_pct, "%")),
                         "<extra></extra>"
                       )) %>%
  layout(title = list(text = "Evoluci√≥n del padr√≥n electoral (2006-2026)",
                     font = list(size = 18)),
         xaxis = list(title = "A√±o Electoral", 
                     tickmode = "array",
                     tickvals = evolucion_completa$a√±o),
         yaxis = list(title = "N√∫mero de Electores",
                     rangemode = "tozero",
                     tickformat = ",.0f"),
         hovermode = "x unified",
         showlegend = FALSE)

p_evolucion
```

## An√°lisis de Crecimiento

```{r analisis_crecimiento}
#| echo: false

# Calcular tasas de crecimiento interanuales
crecimiento_analisis <- evolucion_temporal %>%
  arrange(a√±o) %>%
  mutate(
    periodo = paste0(lag(a√±o), "-", a√±o),
    electores_nuevos = total_electores - lag(total_electores),
    tasa_crecimiento_anual = round(((total_electores/lag(total_electores))^(1/(a√±o-lag(a√±o))) - 1) * 100, 2)
  ) %>%
  filter(!is.na(electores_nuevos))

# Gr√°fico de barras de crecimiento
p_crecimiento <- plot_ly(crecimiento_analisis, x = ~periodo, y = ~electores_nuevos,
                         type = 'bar',
                         marker = list(color = ~tasa_crecimiento_anual,
                                     colorscale = list(c(0, '#AED6F1'), c(1, '#1B4F72')),
                                     showscale = TRUE,
                                     colorbar = list(title = "Tasa Anual %")),
                         text = ~paste0(format(electores_nuevos, big.mark = ","), " nuevos<br>",
                                      tasa_crecimiento_anual, "% anual"),
                         textposition = "outside",
                         hovertemplate = paste0(
                           "<b>Periodo:</b> %{x}<br>",
                           "<b>Nuevos electores:</b> %{y:,.0f}<br>",
                           "<b>Tasa anual:</b> ", crecimiento_analisis$tasa_crecimiento_anual, "%",
                           "<extra></extra>"
                         )) %>%
  layout(title = "Incremento de Electores por Periodo",
         xaxis = list(title = "Periodo"),
         yaxis = list(title = "Nuevos Electores", tickformat = ",.0f"),
         showlegend = FALSE)

p_crecimiento
```

:::::

# üó∫Ô∏è An√°lisis geogr√°fico

Donde quiera que estemos, **todos somos peruanos**. Descubre donde residen la mayor√≠a de nuestros compatriotas.

## Distribuci√≥n por Departamento

```{r mapa_departamental}
#| echo: false
#| message: false

# Preparar datos para el √∫ltimo a√±o disponible con datos departamentales
datos_mapa <- padron_departamental %>%
  filter(a√±o == 2021, nivel_agregacion == "departamental_agregado") %>%
  arrange(desc(numero_de_electores))

# Top 10 departamentos
top10_deptos <- datos_mapa %>%
  head(10) %>%
  mutate(
    porcentaje_nacional = round((numero_de_electores / sum(datos_mapa$numero_de_electores)) * 100, 2)
  )

# Gr√°fico de barras horizontal
p_deptos <- plot_ly(top10_deptos, 
                   y = ~reorder(departamento, numero_de_electores),
                   x = ~numero_de_electores,
                   type = 'bar',
                   orientation = 'h',
                   marker = list(color = ~numero_de_electores,
                               colorscale = 'Blues',
                               showscale = FALSE),
                   text = ~paste0(format(numero_de_electores, big.mark = ","), 
                                " (", porcentaje_nacional, "%)"),
                   textposition = 'outside',
                   hovertemplate = paste0(
                     "<b>%{y}</b><br>",
                     "Electores: %{x:,.0f}<br>",
                     "Porcentaje nacional: ", top10_deptos$porcentaje_nacional, "%<br>",
                     "Distritos: ", top10_deptos$n_distritos,
                     "<extra></extra>"
                   )) %>%
  layout(title = "Top 10 Departamentos por N√∫mero de Electores (2021)",
         xaxis = list(title = "N√∫mero de Electores", tickformat = ",.0f"),
         yaxis = list(title = ""),
         margin = list(l = 100))

p_deptos
```

## Tabla Interactiva por Departamento

```{r tabla_departamental}
#| echo: false

# Preparar tabla completa con todos los indicadores
tabla_deptos <- padron_departamental %>%
  filter(a√±o == 2021, nivel_agregacion == "departamental_agregado") %>%
  mutate(
    Departamento = departamento,
    `Total Electores` = numero_de_electores,
    Varones = electores_varones,
    Mujeres = electores_mujeres,
    `% Varones` = round(percent_electores_varones, 1),
    `% Mujeres` = round(percent_electores_mujeres, 1),
    J√≥venes = electores_jovenes,
    `% J√≥venes` = round(percent_electores_jovenes, 1),
    Distritos = n_distritos
  ) %>%
  select(Departamento, `Total Electores`, Varones, Mujeres, 
         `% Varones`, `% Mujeres`, J√≥venes, `% J√≥venes`, Distritos) %>%
  arrange(desc(`Total Electores`))

# Crear tabla interactiva
datatable(tabla_deptos,
          extensions = c('Buttons', 'Scroller'),
          options = list(
            dom = 'Bfrtip',
            buttons = list(
              'copy',
              list(extend = 'csv', filename = 'padron_departamental'),
              list(extend = 'excel', filename = 'padron_departamental'),
              'print'
            ),
            pageLength = 10,
            scrollY = 400,
            scrollX = TRUE,
            columnDefs = list(
              list(className = 'dt-center', targets = '_all')
            ),
            language = list(
              url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json'
            )
          ),
          rownames = FALSE,
          filter = 'top',
          class = 'cell-border stripe hover') %>%
  formatCurrency(columns = c('Total Electores', 'Varones', 'Mujeres', 'J√≥venes'),
                currency = '', interval = 3, mark = ',', digits = 0) %>%
  formatStyle('Total Electores',
              background = styleColorBar(tabla_deptos$`Total Electores`, '#3498DB'),
              backgroundSize = '100% 90%',
              backgroundRepeat = 'no-repeat',
              backgroundPosition = 'center') %>%
  formatStyle(c('% Varones', '% Mujeres', '% J√≥venes'),
              color = styleInterval(c(40, 50), c('#E74C3C', '#27AE60', '#E74C3C')))
```

## Evoluci√≥n Departamental Comparativa

```{r evolucion_departamental}
#| echo: false

# Seleccionar top 5 departamentos para comparaci√≥n temporal
top5_deptos_nombres <- padron_departamental %>%
  filter(a√±o == 2021, nivel_agregacion == "departamental_agregado") %>%
  arrange(desc(numero_de_electores)) %>%
  head(5) %>%
  pull(departamento)

evolucion_deptos <- padron_departamental %>%
  filter(departamento %in% top5_deptos_nombres,
         nivel_agregacion == "departamental_agregado") %>%
  select(a√±o, departamento, numero_de_electores)

# Gr√°fico de l√≠neas comparativo
p_evol_deptos <- plot_ly(evolucion_deptos, x = ~a√±o, y = ~numero_de_electores,
                         color = ~departamento,
                         type = 'scatter', mode = 'lines+markers',
                         line = list(width = 3),
                         marker = list(size = 8),
                         hovertemplate = paste0(
                           "<b>%{fullData.name}</b><br>",
                           "A√±o: %{x}<br>",
                           "Electores: %{y:,.0f}",
                           "<extra></extra>"
                         )) %>%
  layout(title = "Evoluci√≥n del Padr√≥n Electoral - Top 5 Departamentos",
         xaxis = list(title = "A√±o", tickmode = "array", 
                     tickvals = unique(evolucion_deptos$a√±o)),
         yaxis = list(title = "N√∫mero de Electores", tickformat = ",.0f"),
         legend = list(orientation = "h", y = -0.15),
         hovermode = "x unified")

p_evol_deptos
```

# üë• An√°lisis Demogr√°fico

## Distribuci√≥n por G√©nero

::::: {.panel-tabset}

### Evoluci√≥n Temporal

```{r genero_evolucion}
#| echo: false

# Preparar datos de g√©nero para visualizaci√≥n temporal
genero_temporal <- evolucion_temporal %>%
  select(a√±o, total_varones, total_mujeres, pct_varones, pct_mujeres) %>%
  pivot_longer(cols = c(total_varones, total_mujeres),
               names_to = "genero",
               values_to = "cantidad") %>%
  mutate(
    genero = case_when(
      genero == "total_varones" ~ "Hombres",
      genero == "total_mujeres" ~ "Mujeres"
    ),
    porcentaje = ifelse(genero == "Hombres", pct_varones, pct_mujeres)
  )

# Gr√°fico de √°reas apiladas
p_genero <- plot_ly(genero_temporal, x = ~a√±o, y = ~cantidad,
                    color = ~genero,
                    colors = c("Hombres" = "#3498DB", "Mujeres" = "#E91E63"),
                    type = 'scatter', mode = 'none',
                    fill = 'tonexty', stackgroup = 'one',
                    text = ~paste0(genero, ": ", round(porcentaje, 1), "%"),
                    hovertemplate = paste0(
                      "<b>%{fullData.name}</b><br>",
                      "A√±o: %{x}<br>",
                      "Cantidad: %{y:,.0f}<br>",
                      "Porcentaje: ", round(genero_temporal$porcentaje, 1), "%",
                      "<extra></extra>"
                    )) %>%
  layout(title = "Evoluci√≥n de la Distribuci√≥n por G√©nero",
         xaxis = list(title = "A√±o", tickmode = "array",
                     tickvals = unique(genero_temporal$a√±o)),
         yaxis = list(title = "N√∫mero de Electores", tickformat = ",.0f"),
         legend = list(orientation = "h", y = -0.1),
         hovermode = "x unified")

p_genero
```

### Balance de G√©nero 2026

```{r genero_balance}
#| echo: false

# Datos del √∫ltimo a√±o
genero_2026 <- evolucion_temporal %>%
  filter(a√±o == 2026) %>%
  select(total_varones, total_mujeres, pct_varones, pct_mujeres)

# Gr√°fico de dona
p_dona <- plot_ly(
  labels = c("Hombres", "Mujeres"),
  values = c(genero_2026$total_varones, genero_2026$total_mujeres),
  type = 'pie',
  hole = 0.6,
  marker = list(colors = c("#3498DB", "#E91E63")),
  textinfo = 'label+percent',
  textfont = list(size = 16),
  hovertemplate = paste0(
    "<b>%{label}</b><br>",
    "Cantidad: %{value:,.0f}<br>",
    "Porcentaje: %{percent}",
    "<extra></extra>"
  )
) %>%
  layout(title = "Balance de G√©nero - Padr√≥n Electoral 2026",
         annotations = list(
           list(text = paste0("Total<br>", format(genero_2026$total_varones + genero_2026$total_mujeres, big.mark = ",")),
                showarrow = FALSE,
                font = list(size = 20))
         ),
         showlegend = TRUE)

p_dona
```

### (%) Hombres y mujeres en el Padr√≥n Electoral

```{r indice_paridad}
#| echo: false

# Calcular √≠ndice de paridad de g√©nero por a√±o
paridad <- evolucion_temporal %>%
  mutate(
    indice_paridad = total_mujeres / total_varones,
    diferencia_abs = abs(total_mujeres - total_varones),
    diferencia_pct = abs(pct_mujeres - pct_varones)
  )

# Gr√°fico de √≠ndice de paridad
p_paridad <- plot_ly(paridad, x = ~a√±o, y = ~indice_paridad,
                     type = 'scatter', mode = 'lines+markers',
                     line = list(color = '#9B59B6', width = 3),
                     marker = list(size = 10, color = '#9B59B6'),
                     text = ~round(indice_paridad, 3),
                     textposition = "top center",
                     hovertemplate = paste0(
                       "<b>A√±o:</b> %{x}<br>",
                       "<b>√çndice:</b> %{y:.3f}<br>",
                       "<b>Mujeres:</b> ", format(paridad$total_mujeres, big.mark = ","), "<br>",
                       "<b>Hombres:</b> ", format(paridad$total_varones, big.mark = ","),
                       "<extra></extra>"
                     )) %>%
  add_trace(y = 1, mode = 'lines', line = list(color = 'gray', dash = 'dash'),
           showlegend = FALSE, hoverinfo = 'skip') %>%
  layout(title = "√çndice de Paridad de G√©nero (Mujeres/Hombres)",
         xaxis = list(title = "A√±o", tickmode = "array", tickvals = paridad$a√±o),
         yaxis = list(title = "√çndice de Paridad", range = c(0.95, 1.05)),
         annotations = list(
           list(x = 2016, y = 1, text = "Paridad perfecta = 1.0",
                showarrow = FALSE, font = list(size = 10, color = 'gray'))
         ),
         showlegend = FALSE)

p_paridad
```

:::::

## Los j√≥venes: Nuevos electores en cada proceso

```{r jovenes_analisis}
#| echo: false

# An√°lisis de electores j√≥venes (solo a√±os con datos disponibles)
jovenes_evol <- evolucion_temporal %>%
  filter(!is.na(total_jovenes), a√±o != 2026) %>%  # 2026 no tiene datos de j√≥venes
  mutate(
    jovenes_millones = total_jovenes / 1000000,
    no_jovenes = total_electores - total_jovenes,
    pct_no_jovenes = 100 - pct_jovenes
  )

# Gr√°fico de barras apiladas
datos_stack <- jovenes_evol %>%
  select(a√±o, total_jovenes, no_jovenes) %>%
  pivot_longer(cols = c(total_jovenes, no_jovenes),
               names_to = "grupo",
               values_to = "cantidad") %>%
  mutate(
    grupo = case_when(
      grupo == "total_jovenes" ~ "J√≥venes (18-29 a√±os)",
      grupo == "no_jovenes" ~ "30+ a√±os"
    )
  )

p_jovenes <- plot_ly(datos_stack, x = ~a√±o, y = ~cantidad,
                     color = ~grupo,
                     colors = c("J√≥venes (18-29 a√±os)" = "#F39C12", "30+ a√±os" = "#34495E"),
                     type = 'bar',
                     hovertemplate = paste0(
                       "<b>%{fullData.name}</b><br>",
                       "A√±o: %{x}<br>",
                       "Cantidad: %{y:,.0f}",
                       "<extra></extra>"
                     )) %>%
  layout(title = "Composici√≥n Etaria del Padr√≥n Electoral",
         xaxis = list(title = "A√±o", tickmode = "array", 
                     tickvals = unique(datos_stack$a√±o)),
         yaxis = list(title = "N√∫mero de Electores", tickformat = ",.0f"),
         barmode = 'stack',
         legend = list(orientation = "h", y = -0.1))

p_jovenes
```

# üåç Electores en el Extranjero

## ¬øCuantos electores residian en el extranjero para las EG 2021?

```{r extranjero_continente}
#| echo: false

# An√°lisis por continente para el √∫ltimo a√±o disponible
extranjero_continente <- padron_extranjero %>%
  filter(a√±o == 2021) %>%
  group_by(continente) %>%
  summarise(
    total_electores = sum(numero_de_electores),
    total_paises = n_distinct(pais),
    total_ciudades = n_distinct(ciudad),
    pct_varones = weighted.mean(percent_electores_varones, numero_de_electores),
    pct_mujeres = weighted.mean(percent_electores_mujeres, numero_de_electores)
  ) %>%
  arrange(desc(total_electores))

# Gr√°fico de barras
p_continentes <- plot_ly(extranjero_continente, x = ~reorder(continente, -total_electores), 
                         y = ~total_electores,
                         type = 'bar',
                         marker = list(color = ~total_electores,
                                     colorscale = 'Viridis',
                                     showscale = FALSE),
                         text = ~paste0(format(total_electores, big.mark = ","), " electores<br>",
                                      total_paises, " pa√≠ses<br>",
                                      total_ciudades, " ciudades"),
                         textposition = 'outside',
                         hovertemplate = paste0(
                           "<b>%{x}</b><br>",
                           "Electores: %{y:,.0f}<br>",
                           "Pa√≠ses: ", extranjero_continente$total_paises, "<br>",
                           "Ciudades: ", extranjero_continente$total_ciudades,
                           "<extra></extra>"
                         )) %>%
  layout(title = "Electores peruanos en el extranjero por cada continente (2021)",
         xaxis = list(title = "Continente"),
         yaxis = list(title = "N√∫mero de Electores", tickformat = ",.0f"))

p_continentes
```